// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.14.0
// source: queries.sql

package models

import (
	"context"
)

const createChoice = `-- name: CreateChoice :one
INSERT INTO choice (
    question_id, choice, is_correct
) VALUES (
    $1, $2, $3
)
RETURNING id, is_correct, choice, question_id
`

type CreateChoiceParams struct {
	QuestionID int64
	Choice     string
	IsCorrect  bool
}

func (q *Queries) CreateChoice(ctx context.Context, arg CreateChoiceParams) (Choice, error) {
	row := q.db.QueryRowContext(ctx, createChoice, arg.QuestionID, arg.Choice, arg.IsCorrect)
	var i Choice
	err := row.Scan(
		&i.ID,
		&i.IsCorrect,
		&i.Choice,
		&i.QuestionID,
	)
	return i, err
}

const createQuestion = `-- name: CreateQuestion :one
INSERT INTO question (
    song
) VALUES (
    $1
)
RETURNING id, song, is_active, created_at, updated_at
`

func (q *Queries) CreateQuestion(ctx context.Context, song string) (Question, error) {
	row := q.db.QueryRowContext(ctx, createQuestion, song)
	var i Question
	err := row.Scan(
		&i.ID,
		&i.Song,
		&i.IsActive,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const createUserQuestionChoice = `-- name: CreateUserQuestionChoice :one
INSERT INTO questionchoice (
    user_id, choice_id, question_id, is_correct
) VALUES (
    $1, $2, $3, $4
)
RETURNING id, is_correct, answer_time, choice_id, question_id, user_id
`

type CreateUserQuestionChoiceParams struct {
	UserID     int32
	ChoiceID   int64
	QuestionID int64
	IsCorrect  bool
}

func (q *Queries) CreateUserQuestionChoice(ctx context.Context, arg CreateUserQuestionChoiceParams) (Questionchoice, error) {
	row := q.db.QueryRowContext(ctx, createUserQuestionChoice,
		arg.UserID,
		arg.ChoiceID,
		arg.QuestionID,
		arg.IsCorrect,
	)
	var i Questionchoice
	err := row.Scan(
		&i.ID,
		&i.IsCorrect,
		&i.AnswerTime,
		&i.ChoiceID,
		&i.QuestionID,
		&i.UserID,
	)
	return i, err
}

const getChoice = `-- name: GetChoice :one
SELECT id, is_correct, choice, question_id FROM choice
WHERE question_id = $1 LIMIT 4
`

func (q *Queries) GetChoice(ctx context.Context, questionID int64) (Choice, error) {
	row := q.db.QueryRowContext(ctx, getChoice, questionID)
	var i Choice
	err := row.Scan(
		&i.ID,
		&i.IsCorrect,
		&i.Choice,
		&i.QuestionID,
	)
	return i, err
}

const getQuestion = `-- name: GetQuestion :one
SELECT id, song, is_active, created_at, updated_at FROM question
WHERE id = $1 LIMIT 1
`

func (q *Queries) GetQuestion(ctx context.Context, id int32) (Question, error) {
	row := q.db.QueryRowContext(ctx, getQuestion, id)
	var i Question
	err := row.Scan(
		&i.ID,
		&i.Song,
		&i.IsActive,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getUserQuestionChoice = `-- name: GetUserQuestionChoice :one
SELECT id, is_correct, answer_time, choice_id, question_id, user_id FROM questionchoice
WHERE question_id = $1 LIMIT 1
`

func (q *Queries) GetUserQuestionChoice(ctx context.Context, questionID int64) (Questionchoice, error) {
	row := q.db.QueryRowContext(ctx, getUserQuestionChoice, questionID)
	var i Questionchoice
	err := row.Scan(
		&i.ID,
		&i.IsCorrect,
		&i.AnswerTime,
		&i.ChoiceID,
		&i.QuestionID,
		&i.UserID,
	)
	return i, err
}

const listChoices = `-- name: ListChoices :many
SELECT id, is_correct, choice, question_id FROM choice
ORDER BY id
`

func (q *Queries) ListChoices(ctx context.Context) ([]Choice, error) {
	rows, err := q.db.QueryContext(ctx, listChoices)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Choice
	for rows.Next() {
		var i Choice
		if err := rows.Scan(
			&i.ID,
			&i.IsCorrect,
			&i.Choice,
			&i.QuestionID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listQuestions = `-- name: ListQuestions :many
SELECT id, song, is_active, created_at, updated_at FROM question
ORDER BY id
`

func (q *Queries) ListQuestions(ctx context.Context) ([]Question, error) {
	rows, err := q.db.QueryContext(ctx, listQuestions)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Question
	for rows.Next() {
		var i Question
		if err := rows.Scan(
			&i.ID,
			&i.Song,
			&i.IsActive,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
